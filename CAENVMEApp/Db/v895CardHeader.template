## output width for channels 0 to 7, write 0 to 255 to give a range of 5 to 40ns in a non-linear way
record(longout, "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x40")
	field(DRVL, 0)
	field(DRVH, 255)
	field(VAL, 0)
	field(PINI, "YES")
    info(autosaveFields, "VAL")
    info(vmeconfig, "VAL")
}

alias("$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7:SP", "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7")

## output width for channels 8 to 15, write 0 to 255 to give a range of 5 to 40ns in a non-linear way
record(longout, "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x42")
	field(DRVL, 0)
	field(DRVH, 255)
	field(VAL, 0)
	field(PINI, "YES")
    info(autosaveFields, "VAL")
    info(vmeconfig, "VAL")
}

alias("$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15:SP", "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15")

## pattern inhibit register, bitmask to enable/disable channels
## individual bits set channel enable PVs in v895channel.template
record(mbboDirect, "$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP")
{
}

alias("$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP", "$(P)$(Q)CR$(CRATE):C$(C):ENABLE")

## monitor enable and post, this is to make sure we send the most recent value
## on startup due to lots of PINI
record(calcout, "$(P)$(Q)CR$(CRATE):C$(C):_ENABLE_CHECK")
{
	field(INPA, "$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP")
	field(CALC, "A")
	field(SCAN, "1 second")
	field(OOPT, "On Change")
    field(OUT, "$(P)$(Q)CR$(CRATE):C$(C):_ENABLE_SEND.PROC")
}

record(longout, "$(P)$(Q)CR$(CRATE):C$(C):_ENABLE_SEND")
{
    field(DTYP, "asynUInt32Digital")
	field(DOL, "$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP")
	field(OMSL, "closed_loop")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x4A")
}

## for use in setting an explicit value to the register, it seems that
## writing directly to VAL of the mbboDirect above does not work
record(longout, "$(P)$(Q)CR$(CRATE):C$(C):_ENABLE:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x4A")
}

record(bo, "$(P)$(Q)CR$(CRATE):C$(C):TESTPULSE:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x4C")
}

## card module indentification words

## this is a fixed code 0xFAF5 = 64245 decimal
record(longin, "$(P)$(Q)CR$(CRATE):C$(C):MOD_ID_1")
{
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT),$(C),0xffff)VMEREAD_0xFA")
	field(PINI, "YES")
}

## manufacturer and board/module type
## for a v895 this should be 2132 (decimal) - see manual for card
record(longin, "$(P)$(Q)CR$(CRATE):C$(C):MOD_ID_2")
{
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT),$(C),0xffff)VMEREAD_0xFC")
	field(PINI, "YES")
}

## version and serial number
record(longin, "$(P)$(Q)CR$(CRATE):C$(C):MOD_ID_3")
{
    field(DTYP, "asynUInt32Digital")
    field(INP, "@asynMask($(PORT),$(C),0xffff)VMEREAD_0xFE")
	field(PINI, "YES")
}
