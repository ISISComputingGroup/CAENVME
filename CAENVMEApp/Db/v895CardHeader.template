## output width for channels 0 to 7
record(longout, "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x40")
}

alias("$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7:SP", "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:0_TO_7")

## output width for channels 8 to 15
record(longout, "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x42")
}

alias("$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15:SP", "$(P)$(Q)CR$(CRATE):C$(C):OUT:WIDTH:8_TO_15")

## pattern inhibit register, bitmask to enable/disable channels
## individual bits set channel enable PVs in v895channel.template
record(mbboDirect, "$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x4A")
}

alias("$(P)$(Q)CR$(CRATE):C$(C):ENABLE:SP", "$(P)$(Q)CR$(CRATE):C$(C):ENABLE")

record(bo, "$(P)$(Q)CR$(CRATE):C$(C):TESTPULSE:SP")
{
    field(DTYP, "asynUInt32Digital")
    field(OUT, "@asynMask($(PORT),$(C),0xffff)VMEWRITE_0x4C")
}
